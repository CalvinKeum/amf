/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.amf.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.amf.model.AMFTrackEventEntry;
import com.liferay.amf.model.AMFTrackEventEntryModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AMFTrackEventEntry service. Represents a row in the &quot;AMFTrackEventEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AMFTrackEventEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AMFTrackEventEntryImpl}.
 * </p>
 *
 * @author Calvin Keum
 * @see AMFTrackEventEntryImpl
 * @see AMFTrackEventEntry
 * @see AMFTrackEventEntryModel
 * @generated
 */
@ProviderType
public class AMFTrackEventEntryModelImpl extends BaseModelImpl<AMFTrackEventEntry>
	implements AMFTrackEventEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a amf track event entry model instance should use the {@link AMFTrackEventEntry} interface instead.
	 */
	public static final String TABLE_NAME = "AMFTrackEventEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "amfTrackEventEntryId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "type_", Types.INTEGER },
			{ "ipAddress", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("amfTrackEventEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("type_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ipAddress", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table AMFTrackEventEntry (amfTrackEventEntryId LONG not null primary key,createDate DATE null,userId LONG,type_ INTEGER,ipAddress VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table AMFTrackEventEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY amfTrackEventEntry.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY AMFTrackEventEntry.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.amf.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.amf.model.AMFTrackEventEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.amf.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.amf.model.AMFTrackEventEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.amf.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.amf.model.AMFTrackEventEntry"),
			true);
	public static final long TYPE_COLUMN_BITMASK = 1L;
	public static final long USERID_COLUMN_BITMASK = 2L;
	public static final long CREATEDATE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.amf.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.amf.model.AMFTrackEventEntry"));

	public AMFTrackEventEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _amfTrackEventEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAmfTrackEventEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _amfTrackEventEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AMFTrackEventEntry.class;
	}

	@Override
	public String getModelClassName() {
		return AMFTrackEventEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("amfTrackEventEntryId", getAmfTrackEventEntryId());
		attributes.put("createDate", getCreateDate());
		attributes.put("userId", getUserId());
		attributes.put("type", getType());
		attributes.put("ipAddress", getIpAddress());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long amfTrackEventEntryId = (Long)attributes.get("amfTrackEventEntryId");

		if (amfTrackEventEntryId != null) {
			setAmfTrackEventEntryId(amfTrackEventEntryId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Integer type = (Integer)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String ipAddress = (String)attributes.get("ipAddress");

		if (ipAddress != null) {
			setIpAddress(ipAddress);
		}
	}

	@Override
	public long getAmfTrackEventEntryId() {
		return _amfTrackEventEntryId;
	}

	@Override
	public void setAmfTrackEventEntryId(long amfTrackEventEntryId) {
		_amfTrackEventEntryId = amfTrackEventEntryId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (!_setOriginalType) {
			_setOriginalType = true;

			_originalType = _type;
		}

		_type = type;
	}

	public int getOriginalType() {
		return _originalType;
	}

	@Override
	public String getIpAddress() {
		if (_ipAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _ipAddress;
		}
	}

	@Override
	public void setIpAddress(String ipAddress) {
		_ipAddress = ipAddress;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AMFTrackEventEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AMFTrackEventEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AMFTrackEventEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AMFTrackEventEntryImpl amfTrackEventEntryImpl = new AMFTrackEventEntryImpl();

		amfTrackEventEntryImpl.setAmfTrackEventEntryId(getAmfTrackEventEntryId());
		amfTrackEventEntryImpl.setCreateDate(getCreateDate());
		amfTrackEventEntryImpl.setUserId(getUserId());
		amfTrackEventEntryImpl.setType(getType());
		amfTrackEventEntryImpl.setIpAddress(getIpAddress());

		amfTrackEventEntryImpl.resetOriginalValues();

		return amfTrackEventEntryImpl;
	}

	@Override
	public int compareTo(AMFTrackEventEntry amfTrackEventEntry) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				amfTrackEventEntry.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AMFTrackEventEntry)) {
			return false;
		}

		AMFTrackEventEntry amfTrackEventEntry = (AMFTrackEventEntry)obj;

		long primaryKey = amfTrackEventEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AMFTrackEventEntryModelImpl amfTrackEventEntryModelImpl = this;

		amfTrackEventEntryModelImpl._originalUserId = amfTrackEventEntryModelImpl._userId;

		amfTrackEventEntryModelImpl._setOriginalUserId = false;

		amfTrackEventEntryModelImpl._originalType = amfTrackEventEntryModelImpl._type;

		amfTrackEventEntryModelImpl._setOriginalType = false;

		amfTrackEventEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AMFTrackEventEntry> toCacheModel() {
		AMFTrackEventEntryCacheModel amfTrackEventEntryCacheModel = new AMFTrackEventEntryCacheModel();

		amfTrackEventEntryCacheModel.amfTrackEventEntryId = getAmfTrackEventEntryId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			amfTrackEventEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			amfTrackEventEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		amfTrackEventEntryCacheModel.userId = getUserId();

		amfTrackEventEntryCacheModel.type = getType();

		amfTrackEventEntryCacheModel.ipAddress = getIpAddress();

		String ipAddress = amfTrackEventEntryCacheModel.ipAddress;

		if ((ipAddress != null) && (ipAddress.length() == 0)) {
			amfTrackEventEntryCacheModel.ipAddress = null;
		}

		return amfTrackEventEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{amfTrackEventEntryId=");
		sb.append(getAmfTrackEventEntryId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", ipAddress=");
		sb.append(getIpAddress());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.amf.model.AMFTrackEventEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>amfTrackEventEntryId</column-name><column-value><![CDATA[");
		sb.append(getAmfTrackEventEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ipAddress</column-name><column-value><![CDATA[");
		sb.append(getIpAddress());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AMFTrackEventEntry.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AMFTrackEventEntry.class
		};
	private long _amfTrackEventEntryId;
	private Date _createDate;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private int _type;
	private int _originalType;
	private boolean _setOriginalType;
	private String _ipAddress;
	private long _columnBitmask;
	private AMFTrackEventEntry _escapedModel;
}